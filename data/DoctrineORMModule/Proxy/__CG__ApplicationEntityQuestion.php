<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Question extends \Application\Entity\Question implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionId', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionTitle', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionDate', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionAuthor', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionAuthorEmail', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionAuthorIp');
        }

        return array('__isInitialized__', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionId', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionTitle', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionDate', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionAuthor', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionAuthorEmail', '' . "\0" . 'Application\\Entity\\Question' . "\0" . 'questionAuthorIp');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Question $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getQuestionId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getQuestionId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionId', array());

        return parent::getQuestionId();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionTitle', array());

        return parent::getQuestionTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionDate', array());

        return parent::getQuestionDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionAuthor', array());

        return parent::getQuestionAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionAuthorEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionAuthorEmail', array());

        return parent::getQuestionAuthorEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionAuthorIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionAuthorIp', array());

        return parent::getQuestionAuthorIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionId($questionId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionId', array($questionId));

        return parent::setQuestionId($questionId);
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionTitle($questionTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionTitle', array($questionTitle));

        return parent::setQuestionTitle($questionTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionDate($questionDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionDate', array($questionDate));

        return parent::setQuestionDate($questionDate);
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionAuthor($questionAuthor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionAuthor', array($questionAuthor));

        return parent::setQuestionAuthor($questionAuthor);
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionAuthorEmail($questionAuthorEmail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionAuthorEmail', array($questionAuthorEmail));

        return parent::setQuestionAuthorEmail($questionAuthorEmail);
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionAuthorIp($questionAuthorIp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionAuthorIp', array($questionAuthorIp));

        return parent::setQuestionAuthorIp($questionAuthorIp);
    }

}
